
import chisel3._
import chisel3.util.BitPat

object Instructions {

    val default = (0 until 7).map( _ => 0.U ).toList

    // IMM SEL
    val IMM_N = 0.U(1.W)
    val IMM_Y = 1.U(1.W)
    // BR EN
    val BR_N = 0.U(1.W)
    val BR_Y = 1.U(1.W)
    // LD EN
    val LD_N = 0.U(1.W)
    val LD_Y = 1.U(1.W)
    // ST EN
    val ST_N = 0.U(1.W)
    val ST_Y = 1.U(1.W)
    // WB TYPE
    val WB_ALU = 0.U(1.W)
    val WB_MEM = 1.U(1.W)
    // WR EN
    val WB_N = 0.U(1.W)
    val WB_Y = 1.U(1.W)

    val map = Array(
        //       imm_en     alu_op   br_en    ld_en    st_en   wb_type   wb_en
        // Arithmetic
        ADD ->   (ALU.add,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        ADDI ->  (ALU.add,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SUB ->   (ALU.sub,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        // Logical
        AND ->   (ALU.and,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        ANDI ->  (ALU.and,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        OR ->    (ALU.or,   IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        ORI ->   (ALU.or,   IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        XOR ->   (ALU.xor,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        XORI ->  (ALU.xor,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        // Shifts
        SLL ->   (ALU.sll,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SLLI ->  (ALU.sll,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SRL ->   (ALU.srl,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SRLI ->  (ALU.srl,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        // Compare
        SLT ->   (ALU.lt,   IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SLTI ->  (ALU.lt,   IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SLTU ->  (ALU.ltu,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SLTIU -> (ALU.ltu,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        // Branch
        BNE ->   (ALU.ne,   IMM_N,   BR_Y,    LD_N,    ST_N,   WB_ALU,   WB_N),
        BEQ ->   (ALU.eq,   IMM_N,   BR_Y,    LD_N,    ST_N,   WB_ALU,   WB_N),
        BLT ->   (ALU.lt,   IMM_N,   BR_Y,    LD_N,    ST_N,   WB_ALU,   WB_N),
        BGE ->   (ALU.ge,   IMM_N,   BR_Y,    LD_N,    ST_N,   WB_ALU,   WB_N),
        BLTU ->  (ALU.ltu,  IMM_N,   BR_Y,    LD_N,    ST_N,   WB_ALU,   WB_N),
        BGEU ->  (ALU.geu,  IMM_N,   BR_Y,    LD_N,    ST_N,   WB_ALU,   WB_N),
        // Load
        LW ->    (ALU.add,  IMM_N,   BR_N,    LD_Y,    ST_N,   WB_MEM,   WB_Y),
        // Store
        SW ->    (ALU.add,  IMM_N,   BR_N,    LD_N,    ST_Y,   WB_ALU,   WB_N),
    )

    // Arithmetic
    def ADD = BitPat("b0000000??????????000?????0110011")
    def ADDI = BitPat("b?????????????????000?????0010011")
    def SUB = BitPat("b0100000??????????000?????0110011") // FIXME: OPCODE = 0
    // Logical
    def AND = BitPat("b0000000??????????111?????0110011")
    def ANDI = BitPat("b?????????????????111?????0010011")
    def OR = BitPat("b0000000??????????110?????0110011")
    def ORI = BitPat("b?????????????????110?????0010011")
    def XOR = BitPat("b0000000??????????100?????0110011")
    def XORI = BitPat("b?????????????????100?????0010011")
    // Shift
    def SLL = BitPat("b0000000??????????001?????0110011")
    def SLLI = BitPat("b0000000??????????001?????0010011")
    def SRL = BitPat("b0000000??????????101?????0110011")
    def SRLI = BitPat("b0000000??????????101?????0010011")
    // Compare
    def SLT = BitPat("b0000000??????????010?????0110011")
    def SLTI = BitPat("b?????????????????010?????0010011")
    def SLTU = BitPat("b0000000??????????011?????0110011")
    def SLTIU = BitPat("b?????????????????011?????0010011")
    // Branch
    def BEQ = BitPat("b?????????????????000?????1100011")
    def BNE = BitPat("b?????????????????001?????1100011")
    def BLT = BitPat("b?????????????????100?????1100011")
    def BGE = BitPat("b?????????????????101?????1100011")
    def BLTU = BitPat("b?????????????????110?????1100011")
    def BGEU = BitPat("b?????????????????111?????1100011")
    // Load
    def LW = BitPat("b?????????????????010?????0000011")
    // Store
    def SW = BitPat("b?????????????????010?????0100011")


    // val instr = BitPat("b00000000000000000001000001100011")
    // instr.cover( BNE._2 )

    // Loads
    """ def LB = Instructions( InstructionFormats.R, BitPat("b?????????????????000?????0000011") )
    def LH = BitPat("b?????????????????001?????0000011")
    def LW = BitPat("b?????????????????010?????0000011")
    def LBU = BitPat("b?????????????????100?????0000011")
    def LHU = BitPat("b?????????????????101?????0000011")
    // Stores
    def SB = BitPat("b?????????????????000?????0100011")
    def SH = BitPat("b?????????????????001?????0100011")
    def SW = BitPat("b?????????????????010?????0100011")
    // Shifts
    def SLL = BitPat("b0000000??????????001?????0110011")
    def SLLI = BitPat("b0000000??????????001?????0010011")
    def SRL = BitPat("b0000000??????????101?????0110011")
    def SRLI = BitPat("b0000000??????????101?????0010011")
    def SRA = BitPat("b0100000??????????101?????0110011")
    def SRAI = BitPat("b0100000??????????101?????0010011")
    // Arithmetic
    def ADD = BitPat("b0000000??????????000?????0110011")
    def ADDI = BitPat("b?????????????????000?????0010011")
    def SUB = BitPat("b0100000??????????000?????0110011")
    def LUI = BitPat("b?????????????????????????0110111")
    def AUIPC = BitPat("b?????????????????????????0010111")
    // Logical
    def XOR = BitPat("b0000000??????????100?????0110011")
    def XORI = BitPat("b?????????????????100?????0010011")
    def OR = BitPat("b0000000??????????110?????0110011")
    def ORI = BitPat("b?????????????????110?????0010011")
    def AND = BitPat("b0000000??????????111?????0110011")
    def ANDI = BitPat("b?????????????????111?????0010011")
    // Compare
    def SLT = BitPat("b0000000??????????010?????0110011")
    def SLTI = BitPat("b?????????????????010?????0010011")
    def SLTU = BitPat("b0000000??????????011?????0110011")
    def SLTIU = BitPat("b?????????????????011?????0010011")
    // Branches
    def BEQ = BitPat("b?????????????????000?????1100011")
    def BNE = BitPat("b?????????????????001?????1100011")
    def BLT = BitPat("b?????????????????100?????1100011")
    def BGE = BitPat("b?????????????????101?????1100011")
    def BLTU = BitPat("b?????????????????110?????1100011")
    def BGEU = BitPat("b?????????????????111?????1100011")
    // Jump & Link
    def JAL = BitPat("b?????????????????????????1101111")
    def JALR = BitPat("b?????????????????000?????1100111")
    // Synch
    def FENCE = BitPat("b0000????????00000000000000001111")
    def FENCEI = BitPat("b00000000000000000001000000001111")
    // CSR Access
    def CSRRW = BitPat("b?????????????????001?????1110011")
    def CSRRS = BitPat("b?????????????????010?????1110011")
    def CSRRC = BitPat("b?????????????????011?????1110011")
    def CSRRWI = BitPat("b?????????????????101?????1110011")
    def CSRRSI = BitPat("b?????????????????110?????1110011")
    def CSRRCI = BitPat("b?????????????????111?????1110011")
    // Change Level
    def ECALL = BitPat("b00000000000000000000000001110011")
    def EBREAK = BitPat("b00000000000100000000000001110011")
    def ERET = BitPat("b00010000000000000000000001110011")
    def WFI = BitPat("b00010000001000000000000001110011")

    def NOP = BitPat.bitPatToUInt(BitPat("b00000000000000000000000000010011"))"""
}
