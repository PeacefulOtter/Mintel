	
import chisel3._
import chisel3.util.BitPat

object Instructions {

    val nop = (0 until 7).map( _ => 0.U ).toList

    // IMM SEL
    val IMM_N = 0.U(1.W)
    val IMM_Y = 1.U(1.W)
    // BR EN
    val BR_N = 0.U(1.W)
    val BR_Y = 1.U(1.W)
    // LD EN
    val LD_N = 0.U(1.W)
    val LD_Y = 1.U(1.W)
    // ST EN
    val ST_N = 0.U(1.W)
    val ST_Y = 1.U(1.W)
    // WB TYPE
    val WB_ALU = 0.U(1.W)
    val WB_MEM = 1.U(1.W)
    // WR EN
    val WB_N = 0.U(1.W)
    val WB_Y = 1.U(1.W)
    
    // FIXME: LW - SW format and IMM_EN
    // SIGNED / UNSGINED FIX

    val map = Array(
        //            alu_op    imm_en   br_en    ld_en    st_en   wb_type   wb_en
        NOP   -> List(ALU.add,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_N),
        // Arithmetic
        ADD   -> List(ALU.add,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        ADDI  -> List(ALU.add,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SUB   -> List(ALU.sub,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        // Logical
        AND   -> List(ALU.and,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        ANDI  -> List(ALU.and,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        OR    -> List(ALU.or,   IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        ORI   -> List(ALU.or,   IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        XOR   -> List(ALU.xor,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        XORI  -> List(ALU.xor,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        // Shifts
        SLL   -> List(ALU.sll,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SRL   -> List(ALU.srl,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SLLV  -> List(ALU.sllv, IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SRLV  -> List(ALU.srlv, IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        // Compare
        SLT   -> List(ALU.slt,  IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SLTI  -> List(ALU.slt,  IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SLTU  -> List(ALU.sltu, IMM_N,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        SLTIU -> List(ALU.sltu, IMM_Y,   BR_N,    LD_N,    ST_N,   WB_ALU,   WB_Y),
        // Branch
        BNE   -> List(ALU.ne,   IMM_N,   BR_Y,    LD_N,    ST_N,   WB_ALU,   WB_N),
        BEQ   -> List(ALU.eq,   IMM_N,   BR_Y,    LD_N,    ST_N,   WB_ALU,   WB_N),
        BLT   -> List(ALU.lt,   IMM_N,   BR_Y,    LD_N,    ST_N,   WB_ALU,   WB_N),
        BGE   -> List(ALU.ge,   IMM_N,   BR_Y,    LD_N,    ST_N,   WB_ALU,   WB_N),
        // Load
        LW    -> List(ALU.add,  IMM_Y,   BR_N,    LD_Y,    ST_N,   WB_MEM,   WB_Y),
        // Store
        SW    -> List(ALU.add,  IMM_Y,   BR_N,    LD_N,    ST_Y,   WB_MEM,   WB_N),
    )

    // TODO: add unsigned arithmetic ?
    def NOP   = BitPat("b00000000000000000000000000000000")  // X
    // Arithmetic
    def ADDI  = BitPat("b001000??????????????????????????")  // X
    def ADD   = BitPat("b000000???????????????00000100000")  // X
    def SUB   = BitPat("b000000???????????????00000100010")  // X
    // Logical
    def AND   = BitPat("b000000???????????????00000100100")  // X
    def ANDI  = BitPat("b001100??????????????????????????")  // X
    def OR    = BitPat("b000000???????????????00000100101")  // X
    def ORI   = BitPat("b001101??????????????????????????")  // X
    def XOR   = BitPat("b000000???????????????00000100110")  // X
    def XORI  = BitPat("b001110??????????????????????????")  // X
    // Shift
    def SLL   = BitPat("b00000000000???????????????000000")  // X
    def SRL   = BitPat("b00000000000???????????????000010")  // X
    def SLLV  = BitPat("b000000???????????????00000000100")  // X
    def SRLV  = BitPat("b000000???????????????00000000110")  // X
    // Compare
    def SLT   = BitPat("b000000???????????????00000101010")  // X
    def SLTI  = BitPat("b001010??????????????????????????")  // X
    def SLTU  = BitPat("b000000???????????????00000101011")  // X
    def SLTIU = BitPat("b001011??????????????????????????")  // X
    // Branch
    def BEQ   = BitPat("b000100??????????????????????????")  // X
    def BNE   = BitPat("b000101??????????????????????????")  // X
    def BLT   = BitPat("b000110??????????????????????????")  // X
    def BGE   = BitPat("b000111??????????????????????????")  // X
    // Mem
    def LW    = BitPat("b100011??????????????????????????")
    def SW    = BitPat("b101011??????????????????????????")

    /*
    // Jump & Link
    def JAL  = BitPat("bX")
    def JALR = BitPat("bX")
    */
}
